-- email delivery reliability infrastructure

create extension if not exists "uuid-ossp";
create extension if not exists pgcrypto;

create table if not exists public.email_delivery_queue (
  id uuid primary key default gen_random_uuid(),
  job_type text not null,
  payload jsonb not null,
  metadata jsonb not null default '{}'::jsonb,
  status text not null default 'pending',
  priority integer not null default 0,
  attempt_count integer not null default 0,
  max_attempts integer not null default 12,
  next_attempt_at timestamptz not null default now(),
  last_error text,
  last_error_at timestamptz,
  sent_at timestamptz,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  attempt_history jsonb not null default '[]'::jsonb,
  dedupe_key text
);

create table if not exists public.email_delivery_events (
  id bigint generated by default as identity primary key,
  queue_id uuid references public.email_delivery_queue(id) on delete cascade,
  event_type text not null,
  event_details jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now()
);

create index if not exists email_delivery_queue_status_idx on public.email_delivery_queue(status, next_attempt_at, priority);
create index if not exists email_delivery_queue_dedupe_idx on public.email_delivery_queue(dedupe_key) where dedupe_key is not null;
create index if not exists email_delivery_events_queue_idx on public.email_delivery_events(queue_id, created_at);

create or replace function public.set_email_delivery_queue_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger set_email_delivery_queue_updated_at
before update on public.email_delivery_queue
for each row execute function public.set_email_delivery_queue_updated_at();

alter table public.email_delivery_queue enable row level security;
alter table public.email_delivery_events enable row level security;

create policy "Service role access"
on public.email_delivery_queue
for all
using (auth.role() = 'service_role')
with check (auth.role() = 'service_role');

create policy "Service role access"
on public.email_delivery_events
for all
using (auth.role() = 'service_role')
with check (auth.role() = 'service_role');

comment on table public.email_delivery_queue is 'Queue of outbound email jobs awaiting reliable delivery.';
comment on column public.email_delivery_queue.payload is 'Serialized Resend payload used to resend the email.';
comment on column public.email_delivery_queue.metadata is 'Context about the request such as contact information and environment.';
comment on column public.email_delivery_queue.attempt_history is 'Chronological list of attempts with provider name, attempt number, and errors.';

comment on table public.email_delivery_events is 'Audit trail of email delivery queue lifecycle events.';
comment on column public.email_delivery_events.event_type is 'Event type such as sent, queued, failed, or alert.';
